/**
 * This file was generated by Atlas. Changes will be overwritten.
 */
declare(strict_types=1);

namespace <?= "{$NAMESPACE}\\{$TYPE}\\_generated" ?>;

use Atlas\Table\Table;
use <?= "{$NAMESPACE}\\{$TYPE}\\{$TYPE}Row" ?>;
use <?= "{$NAMESPACE}\\{$TYPE}\\{$TYPE}TableSelect" ?>;

/**
 * @method ?<?= $TYPE ?>Row fetchRow(mixed $primaryVal)
 * @method <?= $TYPE ?>Row[] fetchRows(array $primaryVals)
 * @method <?= $TYPE ?>TableSelect select(array $whereEquals = [])
 * @method <?= $TYPE ?>Row newRow(array $cols = [])
 * @method <?= $TYPE ?>Row newSelectedRow(array $cols)
 */
abstract class <?= $TYPE ?>Table_ extends Table
{
    public const DRIVER = '<?= $DRIVER ?>';

    public const NAME = '<?= $TABLE ?>';

    public const COLUMNS = <?php
        $info = var_export($COLUMNS, true) . ';' . PHP_EOL;

        $repl = [
            'array (' => '[',
            PHP_EOL . '  [' => '[',
            '),' . PHP_EOL => '],' . PHP_EOL,
            PHP_EOL . '  ' => PHP_EOL . '        ',
            PHP_EOL . '          ' => PHP_EOL . '            ',
            PHP_EOL . ');' . PHP_EOL => PHP_EOL . '    ];' . PHP_EOL,
            " => NULL," . PHP_EOL   => " => null," . PHP_EOL,
        ];

        echo str_replace(
            array_keys($repl),
            array_values($repl),
            $info
        );
    ?>

    public const COLUMN_NAMES = [<?php
        foreach ($COLUMNS as $name => $info) {
            echo PHP_EOL . '        ' . var_export($name, true) . ',';
        }
        echo PHP_EOL . '    ';
    ?>];

    public const PRIMARY_KEY = [<?php
        $primaryCount = 0;
        foreach ($COLUMNS as $col) {
            if ($col['primary']) {
                $primaryCount ++;
                echo PHP_EOL . "        '{$col['name']}',";
            }
        }
        echo PHP_EOL . '    ';
     ?>];

    public const COMPOSITE_KEY = <?= ($primaryCount > 1) ? 'true' : 'false'; ?>;

    public const AUTOINC_COLUMN = <?php
        $name = 'null';
        foreach ($COLUMNS as $col) {
            if ($col['autoinc']) {
                $name = "'{$col['name']}'";
                break;
            }
        }
        echo $name;
    ?>;

    public const AUTOINC_SEQUENCE = <?= $SEQUENCE === null
        ? 'null'
        : "'{$SEQUENCE}'"
    ?>;

    public const ROW_CLASS = <?= $TYPE ?>Row::CLASS;
}
