/**
 * This file was generated by Atlas. Changes will be overwritten.
 */
declare(strict_types=1);

namespace <?= "{$NAMESPACE}\\{$TYPE}\\_generated" ?>;

use Atlas\Mapper\Mapper;
use <?= "{$NAMESPACE}\\{$TYPE}\\{$TYPE}Record" ?>;
use <?= "{$NAMESPACE}\\{$TYPE}\\{$TYPE}RecordSet" ?>;
use <?= "{$NAMESPACE}\\{$TYPE}\\{$TYPE}Related" ?>;
use <?= "{$NAMESPACE}\\{$TYPE}\\{$TYPE}Select" ?>;
use <?= "{$NAMESPACE}\\{$TYPE}\\{$TYPE}Table" ?>;

/**
 * @method <?= $TYPE ?>Table getTable()
 * @method ?<?= $TYPE ?>Record fetchRecord(mixed $primaryVal, array $loadRelated = [])
 * @method ?<?= $TYPE ?>Record fetchRecordBy(array $whereEquals, array $loadRelated = [])
 * @method <?= $TYPE ?>Record[] fetchRecords(array $primaryVals, array $loadRelated = [])
 * @method <?= $TYPE ?>Record[] fetchRecordsBy(array $whereEquals, array $loadRelated = [])
 * @method <?= $TYPE ?>RecordSet fetchRecordSet(array $primaryVals, array $loadRelated = [])
 * @method <?= $TYPE ?>RecordSet fetchRecordSetBy(array $whereEquals, array $loadRelated = [])
 * @method <?= $TYPE ?>Select select(array $whereEquals = [])
 * @method <?= $TYPE ?>Record newRecord(array $fields = [])
 * @method <?= $TYPE ?>Record[] newRecords(array $fieldSets)
 * @method <?= $TYPE ?>RecordSet newRecordSet(<?= $TYPE ?>Record[] $records = [])
 * @method <?= $TYPE ?>Record turnRowIntoRecord(<?= $TYPE ?>Row $row, array $loadRelated = [])
 * @method <?= $TYPE ?>Record[] turnRowsIntoRecords(<?= $TYPE ?>Row[] $rows, array $loadRelated = [])
 */
abstract class <?= $TYPE ?>_ extends Mapper
{
    public const RECORD_CLASS = <?= "{$TYPE}Record" ?>::CLASS;
    public const RECORD_SET_CLASS = <?= "{$TYPE}RecordSet" ?>::CLASS;
    public const RELATED_CLASS = <?= "{$TYPE}Related" ?>::CLASS;
    public const SELECT_CLASS = <?= "{$TYPE}Select" ?>::CLASS;
}
